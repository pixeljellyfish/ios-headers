/*
* This header is generated by classdump-dyld 1.0
* on Thursday, September 24, 2020 at 12:47:33 AM British Summer Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/Frameworks/Foundation.framework/Foundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Foundation/Foundation-Structs.h>
#import <libobjc.A.dylib/NSSecureCoding.h>
#import <libobjc.A.dylib/NSCopying.h>

@class NSString;

@interface NSPredicate : NSObject <NSSecureCoding, NSCopying> {

	struct {
		unsigned _evaluationBlocked : 1;
		unsigned _reservedPredicateFlags : 31;
	}  _predicateFlags;
	unsigned reserved;

}

@property (nonatomic,readonly) NSPredicate * wf_photoLibraryFilteringPredicate; 
@property (nonatomic,readonly) BOOL ef_matchesEverything; 
@property (nonatomic,readonly) BOOL ef_matchesNothing; 
@property (copy,readonly) NSString * predicateFormat; 
+(id)predicateForTAEventsInDateInterval:(id)arg1 ;
+(id)predicateForTAEventsClass:(Class)arg1 ;
+(id)predicateForTAEventsClass:(Class)arg1 andEventSubtype:(unsigned long long)arg2 ;
+(id)truePredicate;
+(id)falsePredicate;
+(id)predicateForDateKey:(id)arg1 isGreaterThanOrEqualToDate:(id)arg2 ;
+(id)predicateForDateKey:(id)arg1 isLessThanOrEqualToDate:(id)arg2 ;
+(id)predicateForDateKey:(id)arg1 isGreaterThanDate:(id)arg2 ;
+(id)predicateForDateKey:(id)arg1 isLessThanDate:(id)arg2 ;
+(id)predicateForNilValueForKey:(id)arg1 ;
+(id)predicateWithCKDPQueryFilters:(id)arg1 translator:(id)arg2 ;
+(id)predicateWithSortedCKDPQueryFilters:(id)arg1 translator:(id)arg2 ;
+(id)vui_predicateWithSubpredicates:(id)arg1 type:(unsigned long long)arg2 ;
+(id)vui_equalPredicateWithKeyPath:(id)arg1 value:(id)arg2 ;
+(id)vui_inPredicateWithKeyPath:(id)arg1 value:(id)arg2 ;
+(id)vui_keyPathBitTestPredicateWithKeyPath:(id)arg1 value:(id)arg2 ;
+(id)_vui_keyPathsInPredicate:(id)arg1 ;
+(id)_vui_keyPathsInCompoundPredicate:(id)arg1 ;
+(id)_vui_keyPathsInComparisonPredicate:(id)arg1 ;
+(id)vui_notEqualPredicateWithKeyPath:(id)arg1 value:(id)arg2 ;
+(id)vcp_imagesPredicate:(BOOL)arg1 ;
+(id)vcp_stillImagesPredicate:(BOOL)arg1 ;
+(id)vcp_livePhotosPredicate:(BOOL)arg1 ;
+(id)vcp_moviesPredicate:(BOOL)arg1 ;
+(id)predicateWithFCCKPQueryFilters:(id)arg1 translator:(id)arg2 ;
+(id)predicateWithSortedFCCKPQueryFilters:(id)arg1 translator:(id)arg2 ;
+(id)_predicateForItemsWithAttribute:(int)arg1 ;
+(id)predicateForAssetsInAssetCollectionWithID:(id)arg1 ;
+(id)predicateForCloudInvitationsInAssetCollection:(id)arg1 ;
+(id)predicateForCommentsInAsset:(id)arg1 ;
+(id)predicateForLikesInAsset:(id)arg1 ;
+(id)ef_matchEverythingPredicate;
+(id)ef_matchNothingPredicate;
+(id)hk_predicateForSamplesInDayIndexRange:(timespec)arg1 ;
+(void)initialize;
+(id)predicateWithBlock:(/*^block*/id)arg1 ;
+(id)predicateWithValue:(BOOL)arg1 ;
+(BOOL)supportsSecureCoding;
+(id)predicateWithFormat:(id)arg1 argumentArray:(id)arg2 ;
+(id)newStringFrom:(id)arg1 usingUnicodeTransforms:(unsigned long long)arg2 ;
+(id)predicateWithFormat:(id)arg1 arguments:(char*)arg2 ;
+(id)predicateWithFormat:(id)arg1 ;
+(CFLocaleRef)retainedLocale;
-(id)OR:(id)arg1 ;
-(id)NOT;
-(id)AND:(id)arg1 ;
-(id)CKDPQueryFiltersWithTranslator:(id)arg1 error:(id*)arg2 ;
-(BOOL)isEqualToPredicate:(id)arg1 ;
-(id)vui_keyPathsInPredicate;
-(id)hd_sqlPredicateForSelect;
-(id)FCCKPQueryFiltersWithTranslator:(id)arg1 error:(id*)arg2 ;
-(NSPredicate *)wf_photoLibraryFilteringPredicate;
-(id)em_searchableIndexQueryGenerator;
-(BOOL)ef_matchesEverything;
-(BOOL)ef_matchesNothing;
-(id)predicateNodeFromPropertyMapper:(id)arg1 ;
-(id)hk_filterRepresentationForDataTypes:(id)arg1 ;
-(id)cls_normalizedPredicate:(id)arg1 error:(id*)arg2 ;
-(id)br_watchedURL;
-(id)br_urlWithWatchedChildren;
-(id)br_fileObjectIDWithWatchedChildren;
-(id)br_watchedFileObjectID;
-(void)ab_bindWhereClauseComponentOfStatement:(CPSqliteStatement*)arg1 withBindingOffset:(int*)arg2 predicateIdentifier:(int)arg3 ;
-(id)ab_metadataForMatchingRow:(CPSqliteStatement*)arg1 columnOffset:(unsigned long long)arg2 ;
-(void)ab_bindJoinClauseComponentOfStatement:(CPSqliteStatement*)arg1 withBindingOffset:(int*)arg2 predicateIdentifier:(int)arg3 ;
-(void)ab_runPredicateWithSortOrder:(unsigned)arg1 ranked:(BOOL)arg2 inAddressBook:(void*)arg3 withDelegate:(id)arg4 ;
-(BOOL)ab_hasCallback;
-(void)ab_addCallbackContextToArray:(id)arg1 ;
-(id)ab_newQueryWithSortOrder:(unsigned)arg1 ranked:(BOOL)arg2 addressBook:(void*)arg3 propertyIndices:(const _CFDictionary*)arg4 ;
-(void)ab_bindSelectClauseComponentOfStatement:(CPSqliteStatement*)arg1 withBindingOffset:(int*)arg2 predicateIdentifier:(int)arg3 ;
-(id)minimalFormInContext:(id)arg1 ;
-(id)_keypathsForDerivedPropertyValidation:(id*)arg1 ;
-(NSString *)predicateFormat;
-(id)copyWithZone:(NSZone*)arg1 ;
-(BOOL)evaluateWithObject:(id)arg1 substitutionVariables:(id)arg2 ;
-(BOOL)_allowsEvaluation;
-(void)_validateForMetadataQueryScopes:(id)arg1 ;
-(BOOL)evaluateWithObject:(id)arg1 ;
-(void)allowEvaluation;
-(id)predicateWithSubstitutionVariables:(id)arg1 ;
-(id)generateMetadataDescription;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(void)acceptVisitor:(id)arg1 flags:(unsigned long long)arg2 ;
-(id)description;
@end

