/*
* This header is generated by classdump-dyld 1.0
* on Thursday, September 24, 2020 at 12:50:20 AM British Summer Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CoreFoundation/CoreFoundation-Structs.h>
#import <libobjc.A.dylib/ASDNotificationType.h>
#import <libobjc.A.dylib/EFSQLBindable.h>
#import <libobjc.A.dylib/HMFObject.h>
#import <libobjc.A.dylib/HKUUIDCollection.h>
#import <libobjc.A.dylib/_PASDistilledString.h>
#import <libobjc.A.dylib/PQLValuable.h>
#import <libobjc.A.dylib/AFSecurityDigestibleChunksProviding.h>
#import <libobjc.A.dylib/AFContextSnapshot.h>
#import <libobjc.A.dylib/CKRecordValue.h>
#import <libobjc.A.dylib/INJSONSerializable.h>
#import <libobjc.A.dylib/CUByteCodable.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/NSMutableCopying.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@class EFSQLBinding, NSString, NSArray;

@interface NSData : NSObject <ASDNotificationType, EFSQLBindable, HMFObject, HKUUIDCollection, _PASDistilledString, PQLValuable, AFSecurityDigestibleChunksProviding, AFContextSnapshot, CKRecordValue, INJSONSerializable, CUByteCodable, NSCopying, NSMutableCopying, NSSecureCoding>

@property (nonatomic,readonly) NSString * ic_md5; 
@property (copy,readonly) NSData * ef_md5Digest; 
@property (copy,readonly) NSData * ef_sha256Digest; 
@property (copy,readonly) NSString * ef_hexString; 
@property (nonatomic,readonly) EFSQLBinding * ef_SQLBinding; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) NSData * ams_compressedData; 
@property (nonatomic,readonly) NSData * ams_decompressedData; 
@property (nonatomic,readonly) NSString * ams_hexAddressDescription; 
@property (nonatomic,readonly) NSString * ams_nvramDescription; 
@property (nonatomic,readonly) NSData * ams_SHA1; 
@property (getter=hmf_isZeroed,readonly) BOOL hmf_zeroed; 
@property (readonly) NSString * hmf_hexadecimalRepresentation; 
@property (copy,readonly) NSString * shortDescription; 
@property (copy,readonly) NSString * privateDescription; 
@property (copy,readonly) NSString * propertyDescription; 
@property (nonatomic,copy,readonly) NSArray * attributeDescriptions; 
@property (nonatomic,readonly) NSData * SHA1Data; 
@property (nonatomic,readonly) NSString * SHA1HexString; 
@property (nonatomic,readonly) NSData * SHA256Data; 
@property (nonatomic,readonly) NSData * NRSHA256; 
@property (readonly) unsigned long long length; 
@property (readonly) const void* bytes; 
+(id)NF_dataWithHexString:(id)arg1 ;
+(id)da_dataWithHexString:(id)arg1 stringIsUppercase:(BOOL)arg2 ;
+(id)da_dataWithHexString:(id)arg1 ;
+(id)pl_dataWithMappedContentsOfFileHandle:(id)arg1 ;
+(id)pl_dataWithMappedContentsOfFileDescriptor:(int)arg1 ;
+(id)makeArchive:(const void*)arg1 length:(unsigned long long)arg2 level:(float)arg3 ;
+(id)ef_crlfData;
+(id)safari_dataWithHexString:(id)arg1 ;
+(id)dataWithJSONObjectRepresentation:(id)arg1 bundle:(id)arg2 ;
+(id)_AESKeyForDataProtectionClass:(unsigned long long)arg1 error:(id*)arg2 ;
+(id)_generateInitializationVectorDataWithError:(id*)arg1 ;
+(id)_labelForDataProtectionClass:(unsigned long long)arg1 ;
+(const CFStringRef)_accessibleAttributeForDataProtectionClass:(unsigned long long)arg1 ;
+(id)ams_generateEncryptionKey;
+(id)shortDescription;
+(id)hk_dataWithSHA256Fingerprint:(id)arg1 error:(out id*)arg2 ;
+(id)hk_nilDataMD5;
+(id)hk_randomDataOfLength:(long long)arg1 ;
+(id)__IS_dataMappedSharedReadOnlyWithContentsOfURL:(id)arg1 ;
+(id)__is__bookmarkDataWithContentsOfURL:(id)arg1 ;
+(id)__is__dataWithContentsOfURL:(id)arg1 ;
+(id)mb_dataFromHexadecimalString:(id)arg1 ;
+(unsigned long long)_cn_maxDataLengthFittingInBase64EncodingLength:(unsigned long long)arg1 ;
+(id)_cn_dataFromHexString:(id)arg1 ;
+(id)fp_dataWithLastUsedDate:(id)arg1 ;
+(id)fp_dataWithFavoriteRank:(id)arg1 ;
+(id)newFromSqliteValue:(sqlite3_valueRef)arg1 ;
+(id)newFromSqliteStatement:(sqlite3_stmtRef)arg1 atIndex:(int)arg2 ;
+(id)CKDataFromBase64URLSafeString:(id)arg1 ;
+(id)CKDataWithHexString:(id)arg1 ;
+(id)CKDataWithHexString:(id)arg1 stringIsUppercase:(BOOL)arg2 ;
+(id)_intents_decodeWithJSONDecoder:(id)arg1 codableDescription:(id)arg2 from:(id)arg3 ;
+(id)_geo_dataForHexString:(id)arg1 ;
+(id)dataWithCPPData:(const basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)arg1 copy:(BOOL)arg2 ;
+(id)_geo_withXPCData:(id)arg1 ;
+(id)MCDataWithHexString:(id)arg1 ;
+(id)MCDataWithCFData:(CFDataRef)arg1 ;
+(id)MCDataFromFile:(id)arg1 ;
+(id)if_dataWithAuditToken:(SCD_Struct_NS12)arg1 ;
+(id)if_dataWithValue:(id)arg1 ;
+(id)createWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 error:(id*)arg3 ;
+(id)bs_dataWithVMAllocatedBytes:(const void*)arg1 length:(unsigned long long)arg2 ;
+(id)__imDataWithHexString:(id)arg1 ;
+(id)__imDataWithRandomBytes:(unsigned long long)arg1 ;
+(id)fromUUID:(id)arg1 ;
+(id)dataWithRandomBytesOfSize:(unsigned long long)arg1 ;
+(id)_alloc;
+(id)dataWithBytes:(const void*)arg1 length:(unsigned long long)arg2 ;
+(id)dataWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 maxLength:(unsigned long long)arg3 error:(id*)arg4 ;
+(id)dataWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3 ;
+(id)dataWithContentsOfURL:(id)arg1 ;
+(id)dataWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 freeWhenDone:(BOOL)arg3 ;
+(id)dataWithData:(id)arg1 ;
+(id)_newZeroingDataWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 deallocator:(/*^block*/id)arg3 ;
+(BOOL)_base64DecodingAlwaysSucceedsForOptions:(unsigned long long)arg1 ;
+(id)dataWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 ;
+(id)data;
+(id)_newZeroingDataWithBytes:(const void*)arg1 length:(unsigned long long)arg2 ;
+(id)dataWithContentsOfFile:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3 ;
+(id)dataWithContentsOfFile:(id)arg1 ;
+(id)dataWithContentsOfMappedFile:(id)arg1 ;
+(id)allocWithZone:(NSZone*)arg1 ;
+(id)CKDataWithHexString:(id)arg1 ;
+(id)CKDataWithHexString:(id)arg1 stringIsUppercase:(BOOL)arg2 ;
+(BOOL)supportsSecureCoding;
-(id)NF_asHexString;
-(BOOL)NF_isZeroed;
-(id)mf_attachmentWithFilename:(id)arg1 UTIType:(id)arg2 fromManager:(id)arg3 contextID:(id)arg4 ;
-(id)da_lowercaseHexStringWithoutSpaces;
-(id)da_uppercaseHexStringWithoutSpaces;
-(id)da_hexString;
-(void)pl_adviceWillNeed;
-(void)pl_adviceDoNotNeed;
-(unsigned long long)pl_advisoryLength;
-(id)initWithCPLArchiver:(id)arg1 ;
-(id)plistArchiveWithCPLArchiver:(id)arg1 ;
-(id)cplSyncAnchorSimpleDescription;
-(id)cplQueryCursorSimpleDescription;
-(id)cplSyncAnchorDescription;
-(id)cplQueryCursorDescription;
-(id)_faCircularImageDataWithDiameter:(double)arg1 cropRect:(CGRect)arg2 ;
-(CGImageRef)_faCreateImageRef;
-(CGRect)_faTranformedRectForImageSize:(CGSize)arg1 cropRect:(CGRect)arg2 diameter:(double)arg3 ;
-(CGContextRef)_faCreateContextWithImage:(CGImageRef)arg1 crop:(CGRect)arg2 diameter:(double)arg3 ;
-(id)_faCircularImageDataWithDiameter:(double)arg1 ;
-(id)fa_dictionaryFromPlistData;
-(id)MSInitWithBase64Encoding:(id)arg1 ;
-(id)MSBase64Encoding;
-(id)MSHexString;
-(id)canonicalUuidString;
-(id)mercuryUuidString;
-(id)ic_stringValue;
-(NSString *)ic_md5;
-(id)mf_subdataWithRange:(NSRange)arg1 ;
-(id)mf_decodeBase64;
-(NSRange)mf_rangeOfRFC822HeaderData;
-(NSRange)mf_rangeOfCString:(const char*)arg1 options:(unsigned long long)arg2 range:(NSRange)arg3 ;
-(NSRange)mf_rangeOfData:(id)arg1 options:(unsigned long long)arg2 range:(NSRange)arg3 ;
-(id)mf_dataByConvertingUnixNewlinesToNetwork;
-(id)mf_encodeBase64;
-(id)mf_encodeBase64WithoutLineBreaks;
-(id)mf_decodeQuotedPrintableForText:(BOOL)arg1 ;
-(BOOL)mf_immutable;
-(id)mf_decodeUuencoded;
-(id)mf_decodeBase64InRange:(NSRange*)arg1 ;
-(id)mf_decodeModifiedBase64;
-(id)mf_encodeModifiedBase64;
-(id)mf_encodeBase64HeaderData;
-(NSRange)mf_rangeOfCString:(const char*)arg1 ;
-(id)mf_locationsOfUnixNewlinesNeedingConversion;
-(id)mf_subdataToIndex:(unsigned long long)arg1 ;
-(id)mf_subdataFromIndex:(unsigned long long)arg1 ;
-(NSRange)mf_rangeOfCString:(const char*)arg1 options:(unsigned long long)arg2 ;
-(id)cr_md5DigestHexString;
-(id)_FTStringFromBaseData;
-(id)_FTCopyGzippedData;
-(id)_FTCopyOptionallyGzippedData;
-(id)gzipInflate;
-(id)gzipDeflate:(float)arg1 ;
-(id)VNSubdataWithRange:(NSRange)arg1 rangeDescriptionProvidingBlock:(/*^block*/id)arg2 error:(id*)arg3 ;
-(id)VNSubdataWithRange:(NSRange)arg1 rangeDescription:(id)arg2 error:(id*)arg3 ;
-(NSData *)ef_md5Digest;
-(id)ef_sha256DigestWithSalts:(id)arg1 ;
-(NSRange)ef_rangeOfData:(id)arg1 options:(unsigned long long)arg2 ;
-(NSRange)ef_rangeOfData:(id)arg1 ;
-(id)ef_subdataFromIndex:(unsigned long long)arg1 ;
-(id)ef_subdataToIndex:(unsigned long long)arg1 ;
-(BOOL)ef_hasSuffix:(id)arg1 ;
-(BOOL)ef_containsData:(id)arg1 ;
-(EFSQLBinding *)ef_SQLBinding;
-(NSData *)ef_sha256Digest;
-(NSString *)ef_hexString;
-(unsigned long long)safari_hashMD5;
-(id)safari_SHA1Hash;
-(id)safari_dataByCompressingData;
-(id)safari_dataByDecompressingData;
-(BOOL)safari_dataAppearsToBeCompressed;
-(id)safari_scryptHashWithSalt:(id)arg1 N:(unsigned long long)arg2 r:(unsigned)arg3 p:(unsigned)arg4 keyLength:(unsigned long long)arg5 ;
-(id)safari_descriptionWithoutSpaces;
-(id)safari_dataByAppendingData:(id)arg1 ;
-(id)JSONObjectRepresentationWritingResourcesToBundlePath:(id)arg1 ;
-(id)PK_gzipInflate;
-(id)PK_gzipDeflate;
-(id)_axRecursivelyPropertyListCoercedRepresentationWithError:(id*)arg1 ;
-(id)_axRecursivelyReconstitutedRepresentationFromPropertyListWithError:(id*)arg1 ;
-(id)generateSHA1;
-(id)stringInHexFormat;
-(id)TR_compressedGzipData;
-(id)TR_decompressedGzipData;
-(NSData *)ams_compressedData;
-(NSData *)ams_decompressedData;
-(id)ams_compressWithAlgorithm:(long long)arg1 ;
-(NSData *)ams_SHA1;
-(id)ams_decryptUsingDataProtectionClass:(unsigned long long)arg1 initializationVectorData:(id)arg2 tagData:(id)arg3 error:(id*)arg4 ;
-(SCD_Struct_NS15)ams_encryptDataUsingDataProtectionClass:(unsigned long long)arg1 error:(id*)arg2 ;
-(id)_compressGZIP;
-(id)ams_decompressWithAlgorithm:(long long)arg1 ;
-(id)_compressLZMA;
-(id)_decompressGZIP;
-(id)_decompressLZMA;
-(SCD_Struct_NS15)ams_encryptDataUsingKey:(id)arg1 error:(id*)arg2 ;
-(id)ams_decryptUsingKey:(id)arg1 initializationVectorData:(id)arg2 tagData:(id)arg3 error:(id*)arg4 ;
-(NSString *)ams_nvramDescription;
-(NSString *)ams_hexAddressDescription;
-(NSString *)privateDescription;
-(NSString *)shortDescription;
-(id)decodeDateComponents;
-(NSString *)hmf_hexadecimalRepresentation;
-(id)hmf_hexadecimalStringWithOptions:(unsigned long long)arg1 ;
-(id)hmf_initWithHexadecimalString:(id)arg1 options:(unsigned long long)arg2 ;
-(id)decodeTimeZone;
-(id)decodeArrayOfDateComponents;
-(BOOL)hmf_isZeroed;
-(id)decodeCalendar;
-(id)hmf_zeroingCopy;
-(id)hk_MD5;
-(id)hk_SHA256;
-(void)hk_enumerateUUIDBytesUsingBlock:(/*^block*/id)arg1 ;
-(void)hk_enumerateUUIDsUsingBlock:(/*^block*/id)arg1 ;
-(unsigned long long)hk_countOfUUIDs;
-(BOOL)hk_enumerateUUIDsWithError:(id*)arg1 block:(/*^block*/id)arg2 ;
-(id)hk_dataForAllUUIDs;
-(id)_operateOnDataUsingCompressionAlgorithm:(int)arg1 operation:(int)arg2 ;
-(id)scn_compressedDataUsingCompressionAlgorithm:(int)arg1 ;
-(id)scn_uncompressedDataUsingCompressionAlgorithm:(int)arg1 ;
-(id)scn_indexedDataEncodingHighWatermarkWithBytesPerIndex:(unsigned long long)arg1 ;
-(id)scn_indexedDataDecodingHighWatermarkWithBytesPerIndex:(unsigned long long)arg1 ;
-(id)scn_indexedDataEncodingDeltaWithBytesPerIndex:(unsigned long long)arg1 ;
-(id)scn_indexedDataDecodingDeltaWithBytesPerIndex:(unsigned long long)arg1 ;
-(id)scn_indexedDataEncodingTrianglePairsWithBytesPerIndex:(unsigned long long)arg1 ;
-(id)scn_indexedDataDecodingTrianglePairsWithBytesPerIndex:(unsigned long long)arg1 ;
-(id)_uiSaveContentsToTemporaryFile;
-(id)__is__bookmarkResourcePropertyForKey:(id)arg1 ;
-(id)mb_hexadecimalString;
-(id)_webkit_guessedMIMEType;
-(id)_webkit_guessedMIMETypeForXML;
-(BOOL)_web_isCaseInsensitiveEqualToCString:(const char*)arg1 ;
-(id)_webkit_parseRFC822HeaderFields;
-(BOOL)_web_startsWithBlankLine;
-(long long)_web_locationAfterFirstBlankLine;
-(id)aa_compressedData:(int)arg1 ;
-(id)aa_hexString;
-(id)abDecodedUTF7;
-(id)abStringAtRange:(NSRange)arg1 inEncoding:(unsigned long long)arg2 ;
-(BOOL)abIsUTF16EntourageVCard;
-(id)abEncodeVCardBase64DataWithInitialLength:(unsigned long long)arg1 ;
-(id)abDecodeVCardBase64;
-(id)_cn_encodeVCardBase64DataWithInitialLength:(unsigned long long)arg1 ;
-(id)_cn_hexString;
-(BOOL)_cn_containsData:(id)arg1 ;
-(id)_cn_decodeBase64;
-(id)_cn_decodeBase64IgnoringWhitespace;
-(id)_cn_SHA1String;
-(id)_cn_SHA256HashDataWithSalt:(id)arg1 ;
-(id)_cn_writeToURL:(id)arg1 options:(unsigned long long)arg2 ;
-(id)_cn_md5Hash;
-(id)_pas_revivedString;
-(id)fp_lastUsedDate;
-(id)fp_favoriteRank;
-(BOOL)getFileIDFromXattr:(unsigned long long*)arg1 docID:(unsigned*)arg2 genCount:(unsigned long long*)arg3 ;
-(void)sqliteBind:(sqlite3_stmtRef)arg1 index:(int)arg2 ;
-(void)_ICSStringWithOptions:(unsigned long long)arg1 appendingToString:(id)arg2 ;
-(id)initWithSerializedBackingStore:(id)arg1 ;
-(void)af_enumerateDigestibleChunksWithOptions:(unsigned long long)arg1 usingBlock:(/*^block*/id)arg2 ;
-(id)serializedBackingStore;
-(id)CKDescriptionPropertiesWithPublic:(BOOL)arg1 private:(BOOL)arg2 shouldExpand:(BOOL)arg3 ;
-(void)ck_bindInStatement:(id)arg1 atIndex:(unsigned long long)arg2 ;
-(id)CKSHA256;
-(id)CKUppercaseHexStringWithoutSpaces;
-(id)CKLowercaseHexStringWithoutSpaces;
-(id)CKBase64URLSafeString;
-(id)CKHexString;
-(id)CKHashedDescription;
-(id)_intents_readableTitleWithLocalizer:(id)arg1 metadata:(id)arg2 ;
-(id)_intents_encodeWithJSONEncoder:(id)arg1 codableDescription:(id)arg2 ;
-(void)_in_writeDataToPathForImage:(id)arg1 storeType:(unsigned long long)arg2 completion:(/*^block*/id)arg3 ;
-(id)ak_hexString;
-(id)ak_compressedData:(int)arg1 ;
-(id)_geo_compressedDataViaAlgo:(int)arg1 ;
-(id)_geo_decompressedDataViaAlgo:(int)arg1 ;
-(id)_geo_SHA1Hash;
-(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)cppData;
-(id)_geo_MD5Hash;
-(id)_geo_SHA256Hash;
-(id)_GEOCreateDispatchData;
-(id)_geo_hexString;
-(id)initWithCPPData:(const basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)arg1 copy:(BOOL)arg2 ;
-(id)_geo_newXPCData;
-(id)MCSHA256Hash;
-(id)MCHexString;
-(id)truncatedDescription;
-(id)subdataWithRangeNoCopy:(NSRange)arg1 ;
-(SCD_Struct_NS12)if_auditToken;
-(id)if_valueOfType:(const char*)arg1 ;
-(id)encodedDataAndReturnError:(id*)arg1 ;
-(const char*)encodedBytesAndReturnLength:(unsigned long long*)arg1 error:(id*)arg2 ;
-(unsigned)bs_lengthForMIG;
-(void*)bs_bytesForMIG;
-(NSData *)SHA256Data;
-(NSData *)SHA1Data;
-(id)__imHexString;
-(id)__imHexStringOfBytes:(char*)arg1 withLength:(unsigned long long)arg2 ;
-(id)_FTDecompressData;
-(id)_FTOptionallyDecompressData;
-(NSString *)SHA1HexString;
-(void)NRSHA256:(unsigned char)arg1 ;
-(id)toUUID;
-(NSData *)NRSHA256;
-(BOOL)matchesDataAtFilePath:(id)arg1 ;
-(id)_CUTDecompressData;
-(id)_CUTStringFromBaseData;
-(id)_CUTOptionallyDecompressData;
-(id)_CUTCopyGzippedData;
-(BOOL)_providesConcreteBacking;
-(BOOL)isNSData__;
-(id)initWithBytes:(const void*)arg1 length:(unsigned long long)arg2 ;
-(id)initWithContentsOfFile:(id)arg1 ;
-(BOOL)_decodeBase64EncodedCharacterBuffer:(const char*)arg1 length:(unsigned long long)arg2 options:(unsigned long long)arg3 buffer:(char*)arg4 bufferLength:(unsigned long long)arg5 state:(SCD_Struct_NS16*)arg6 ;
-(unsigned long long)_cfTypeID;
-(id)mutableCopyWithZone:(NSZone*)arg1 ;
-(id)initWithContentsOfURL:(id)arg1 ;
-(void)getBytes:(void*)arg1 range:(NSRange)arg2 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(id)initWithContentsOfFile:(id)arg1 options:(unsigned long long)arg2 maxLength:(unsigned long long)arg3 error:(id*)arg4 ;
-(id)initWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 maxLength:(unsigned long long)arg3 error:(id*)arg4 ;
-(id)initWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3 ;
-(id)_dataWithCompressionOperation:(int)arg1 algorithm:(long long)arg2 ;
-(id)base64EncodedStringWithOptions:(unsigned long long)arg1 ;
-(id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 freeWhenDone:(BOOL)arg3 ;
-(id)initWithContentsOfMappedFile:(id)arg1 ;
-(NSRange)rangeOfData:(id)arg1 options:(unsigned long long)arg2 range:(NSRange)arg3 ;
-(id)_base64EncodingAsString:(BOOL)arg1 withOptions:(unsigned long long)arg2 ;
-(id)subdataWithRange:(NSRange)arg1 ;
-(Class)classForCoder;
-(id)_initWithBase64EncodedObject:(id)arg1 options:(unsigned long long)arg2 ;
-(id)decompressedDataUsingAlgorithm:(long long)arg1 error:(id*)arg2 ;
-(id)initWithBytes:(void*)arg1 length:(unsigned long long)arg2 copy:(BOOL)arg3 freeWhenDone:(BOOL)arg4 bytesAreVM:(BOOL)arg5 ;
-(id)initWithContentsOfMappedFile:(id)arg1 error:(id*)arg2 ;
-(id)compressedDataUsingAlgorithm:(long long)arg1 error:(id*)arg2 ;
-(id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 deallocator:(/*^block*/id)arg3 ;
-(const void*)bytes;
-(NSString *)debugDescription;
-(id)_web_guessedMIMETypeForExtension:(id)arg1 ;
-(id)initWithBase64EncodedString:(id)arg1 options:(unsigned long long)arg2 ;
-(BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2 ;
-(void)enumerateByteRangesUsingBlock:(/*^block*/id)arg1 ;
-(unsigned long long)length;
-(BOOL)writeToFile:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3 ;
-(id)_web_guessedMIMETypeForXML;
-(id)_web_parseRFC822HeaderFields;
-(id)_replaceCString:(const char*)arg1 withCString:(const char*)arg2 ;
-(id)replacementObjectForCoder:(id)arg1 ;
-(BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2 error:(id*)arg3 ;
-(id)initWithContentsOfFile:(id)arg1 error:(id*)arg2 ;
-(BOOL)writeToURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3 ;
-(id)_web_guessedMIMEType;
-(id)_asciiDescription;
-(id)base64EncodedDataWithOptions:(unsigned long long)arg1 ;
-(id)base64Encoding;
-(id)initWithBase64Encoding:(id)arg1 ;
-(id)replacementObjectForPortCoder:(id)arg1 ;
-(BOOL)isEqual:(id)arg1 ;
-(BOOL)_isDispatchData;
-(id)initWithCoder:(id)arg1 ;
-(BOOL)writeToURL:(id)arg1 atomically:(BOOL)arg2 ;
-(void)getBytes:(void*)arg1 length:(unsigned long long)arg2 ;
-(void)encodeWithCoder:(id)arg1 ;
-(void)getBytes:(void*)arg1 ;
-(id)initWithBase64EncodedData:(id)arg1 options:(unsigned long long)arg2 ;
-(id)initWithBytes:(void*)arg1 length:(unsigned long long)arg2 copy:(BOOL)arg3 deallocator:(/*^block*/id)arg4 ;
-(id)initWithData:(id)arg1 ;
-(id)initWithContentsOfFile:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3 ;
-(unsigned long long)hash;
-(BOOL)_allowsDirectEncoding;
-(BOOL)isEqualToData:(id)arg1 ;
-(id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 ;
-(id)_createDispatchData;
-(BOOL)_canReplaceWithDispatchDataForXPCCoder;
-(BOOL)_isCompact;
-(NSString *)description;
-(BOOL)_copyWillRetain;
-(BOOL)_isSafeResumeDataForBackgroundDownload;
-(id)_requestFromResumeData;
-(id)CKUppercaseHexStringWithoutSpaces;
-(id)CKLowercaseHexStringWithoutSpaces;
-(id)CKHexString;
@end

