/*
* This header is generated by classdump-dyld 1.0
* on Thursday, September 24, 2020 at 12:50:21 AM British Summer Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CoreFoundation/CoreFoundation-Structs.h>
#import <libobjc.A.dylib/ASDNotificationType.h>
#import <libobjc.A.dylib/EFSQLBindable.h>
#import <libobjc.A.dylib/EFSQLValueExpressable.h>
#import <libobjc.A.dylib/HMFObject.h>
#import <libobjc.A.dylib/PQLValuable.h>
#import <libobjc.A.dylib/AFSecurityDigestibleChunksProviding.h>
#import <libobjc.A.dylib/_DKDeduping.h>
#import <libobjc.A.dylib/CKRecordValue.h>
#import <libobjc.A.dylib/INJSONSerializable.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@class NSString, EFSQLBinding, NSDateComponents, NSArray;

@interface NSDate : NSObject <ASDNotificationType, EFSQLBindable, EFSQLValueExpressable, HMFObject, PQLValuable, AFSecurityDigestibleChunksProviding, _DKDeduping, CKRecordValue, INJSONSerializable, NSCopying, NSSecureCoding>

@property (nonatomic,readonly) BOOL ic_isToday; 
@property (nonatomic,readonly) BOOL ic_isYesterday; 
@property (nonatomic,readonly) NSString * ic_shortFormattedDate; 
@property (nonatomic,readonly) NSString * ic_briefFormattedDate; 
@property (nonatomic,readonly) NSString * ic_briefFormattedDateForAccessibility; 
@property (nonatomic,readonly) NSString * ic_localDateWithSeconds; 
@property (nonatomic,readonly) EFSQLBinding * ef_SQLBinding; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,copy,readonly) NSString * ef_SQLExpression; 
@property (readonly) double srAbsoluteTime; 
@property (copy,readonly) NSString * hmf_localTimeDescription; 
@property (copy,readonly) NSDateComponents * hmf_dateComponents; 
@property (copy,readonly) NSString * shortDescription; 
@property (copy,readonly) NSString * privateDescription; 
@property (copy,readonly) NSString * propertyDescription; 
@property (nonatomic,copy,readonly) NSArray * attributeDescriptions; 
@property (copy,readonly) NSString * localTimeDescription; 
@property (copy,readonly) NSDateComponents * dateComponents; 
@property (copy,readonly) NSString * iso8601Description; 
@property (copy,readonly) NSString * fileNameDescription; 
@property (readonly) double timeIntervalSinceReferenceDate; 
+(id)cpa_daysAgo:(double)arg1 ;
+(id)cpa_hoursAgo:(double)arg1 ;
+(id)cpa_minutesAgo:(double)arg1 ;
+(id)cpa_secondsAgo:(double)arg1 ;
+(id)cpa_yearsAgo:(double)arg1 ;
+(id)ic_modificationDateForNoteBeingEdited;
+(id)mf_copyDateInCommonFormatsWithString:(id)arg1 ;
+(id)mf_copyLenientDateInCommonFormatsWithString:(id)arg1 ;
+(id)_ef_tonight:(id)arg1 ;
+(id)_ef_gregorianCalendarForTimeZone:(id)arg1 ;
+(id)_ef_nightDateComponents;
+(id)_ef_morningDateComponents;
+(BOOL)ef_isPastTonight;
+(id)ef_tonight;
+(id)ef_tomorrowMorning;
+(id)ef_nextWeekMorning;
+(id)dateWithSRAbsoluteTime:(double)arg1 ;
+(id)iso8601dateFromString:(id)arg1 ;
+(unsigned char)dayOfTheWeek;
+(id)shortDescription;
+(id)dateFromFileNameDescription:(id)arg1 ;
+(id)timeIntervalDescription:(double)arg1 ;
+(id)hk_mostRecentDate:(id)arg1 ;
+(id)hk_dateWithNanosecondsSince1970:(long long)arg1 ;
+(id)hk_earliestPossibleDateWithDayIndex:(long long)arg1 ;
+(id)hk_latestPossibleDateWithDayIndex:(long long)arg1 ;
+(id)hk_dateOnDayIndex:(long long)arg1 atHour:(long long)arg2 calendar:(id)arg3 ;
+(id)hk_noonWithDayIndex:(long long)arg1 calendar:(id)arg2 ;
+(id)calGMT;
+(id)CalDateForNow;
+(id)_nowComponents;
+(id)_todayComponents;
+(id)CalDateForBeginningOfToday;
+(id)_tomorrowComponents;
+(id)dateFromISO8601String:(id)arg1 inTimeZone:(id)arg2 ;
+(id)CalDateForEndOfToday;
+(id)CalDateForBeginningOfTomorrow;
+(id)CalDateForEndOfTomorrow;
+(id)nextRoundedHour;
+(id)formatForTimeRange;
+(id)formatForTimeZoneClarifiedDateString;
+(id)dateFromISO8601String:(id)arg1 ;
+(long long)daysSpannedFromStartDate:(id)arg1 toEndDate:(id)arg2 allDay:(BOOL)arg3 inCalendar:(id)arg4 ;
+(id)dateWithDatePartFromDate:(id)arg1 timePartFromDate:(id)arg2 inCalendar:(id)arg3 ;
+(id)CalSimulatedDateForNow;
+(id)newFromSqliteValue:(sqlite3_valueRef)arg1 ;
+(id)newFromSqliteStatement:(sqlite3_stmtRef)arg1 atIndex:(int)arg2 ;
+(id)_intents_decodeWithJSONDecoder:(id)arg1 codableDescription:(id)arg2 from:(id)arg3 ;
+(id)_geo_calendar;
+(id)geo_dateWithJulianDay:(double)arg1 ;
+(int)daysSince1970;
+(id)dateForDaysSince1970:(int)arg1 ;
+(id)dateWithNaturalLanguageString:(id)arg1 locale:(id)arg2 ;
+(id)dateWithNaturalLanguageString:(id)arg1 ;
+(id)dateWithNaturalLanguageString:(id)arg1 date:(id)arg2 locale:(id)arg3 ;
+(id)dateWithString:(id)arg1 ;
+(id)dateWithDate:(id)arg1 ;
+(id)dateWithTimeIntervalSinceReferenceDate:(double)arg1 ;
+(id)dateWithTimeInterval:(double)arg1 sinceDate:(id)arg2 ;
+(double)timeIntervalSinceReferenceDate;
+(id)dateWithTimeIntervalSince1970:(double)arg1 ;
+(id)dateWithTimeIntervalSinceNow:(double)arg1 ;
+(id)date;
+(BOOL)supportsSecureCoding;
+(id)now;
+(id)distantPast;
+(id)allocWithZone:(NSZone*)arg1 ;
+(id)distantFuture;
-(id)mf_descriptionForMimeHeaders;
-(id)mf_replyPrefixForSender:(id)arg1 ;
-(id)initWithCPLArchiver:(id)arg1 ;
-(id)plistArchiveWithCPLArchiver:(id)arg1 ;
-(BOOL)ic_isToday;
-(BOOL)ic_isYesterday;
-(id)ic_briefFormattedDate:(BOOL)arg1 ;
-(NSString *)ic_localDateWithSeconds;
-(NSString *)ic_shortFormattedDate;
-(NSString *)ic_briefFormattedDate;
-(NSString *)ic_briefFormattedDateForAccessibility;
-(BOOL)ic_isEarlierThanDate:(id)arg1 ;
-(BOOL)ic_isLaterThanDate:(id)arg1 ;
-(id)ec_descriptionForMimeHeaders;
-(NSString *)ef_SQLExpression;
-(id)ef_SQLIsolatedExpression;
-(BOOL)ef_isLaterThanDate:(id)arg1 ;
-(BOOL)ef_isEarlierThanDate:(id)arg1 ;
-(double)ef_timeIntervalSinceDate:(id)arg1 ;
-(EFSQLBinding *)ef_SQLBinding;
-(void)ef_renderSQLExpressionInto:(id)arg1 ;
-(id)JSONObjectRepresentation;
-(id)initWithJSONObjectRepresentation:(id)arg1 ;
-(double)srAbsoluteTime;
-(id)initWithSRAbsoluteTime:(double)arg1 ;
-(id)_axRecursivelyPropertyListCoercedRepresentationWithError:(id*)arg1 ;
-(id)_axRecursivelyReconstitutedRepresentationFromPropertyListWithError:(id*)arg1 ;
-(id)initWithXPCEncoding:(id)arg1 ;
-(id)copyXPCEncoding;
-(NSDateComponents *)dateComponents;
-(NSString *)privateDescription;
-(NSString *)shortDescription;
-(NSString *)hmf_localTimeDescription;
-(NSString *)iso8601Description;
-(NSString *)fileNameDescription;
-(NSString *)localTimeDescription;
-(NSDateComponents *)hmf_dateComponents;
-(id)sg_descriptionForMimeHeaders;
-(id)hk_rfc3339String;
-(id)hk_nearestDate:(id)arg1 ;
-(id)hk_truncateToDay;
-(long long)hk_nanosecondsSince1970;
-(BOOL)hk_isAfterDate:(id)arg1 ;
-(BOOL)hk_isBeforeOrEqualToDate:(id)arg1 ;
-(BOOL)hk_isAfterOrEqualToDate:(id)arg1 ;
-(BOOL)hk_isBeforeDate:(id)arg1 ;
-(long long)hk_dayIndexWithCalendar:(id)arg1 ;
-(long long)hk_earliestPossibleDayIndex;
-(long long)hk_latestPossibleDayIndex;
-(long long)yearInCalendar:(id)arg1 ;
-(id)dateByAddingMonths:(long long)arg1 inCalendar:(id)arg2 ;
-(long long)hourInCalendar:(id)arg1 ;
-(id)dateRemovingTimeComponentsInCalendar:(id)arg1 ;
-(id)timeStringAlwaysIncludeMinutes:(BOOL)arg1 ;
-(id)dateAtHour:(unsigned long long)arg1 minute:(unsigned long long)arg2 second:(unsigned long long)arg3 inTimeZone:(id)arg4 ;
-(void)_performBlockBehindDispatchSync:(/*^block*/id)arg1 inTimeZone:(id)arg2 ;
-(id)dateForEndOfDayInTimeZone:(id)arg1 ;
-(id)dateWithoutTimeComponentsInTimeZone:(id)arg1 ;
-(id)componentsForDayInTimeZone:(id)arg1 ;
-(id)dateByAddingCalSimulatedOffset;
-(id)allComponentsInCalendar:(id)arg1 ;
-(long long)weekdayInCalendar:(id)arg1 ;
-(id)timeOnlyComponentsInCalendar:(id)arg1 ;
-(BOOL)isEqualToDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2 ;
-(long long)minuteInCalendar:(id)arg1 ;
-(long long)compareDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingMinutes:(long long)arg1 inCalendar:(id)arg2 ;
-(id)CalDateRoundedDownToNearestMinuteIncrement:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateRoundedToHourOnSameDayInCalendar:(id)arg1 ;
-(id)localizedDateStringWithTemplate:(id)arg1 ;
-(long long)weekInCalendar:(id)arg1 ;
-(id)_stringWithUseAbbreviatedFormats:(BOOL)arg1 lowerCase:(BOOL)arg2 ;
-(id)localizedWeekdayMonthDayStringShortened:(BOOL)arg1 ;
-(id)localizedAbbrevDateInTimeZone:(id)arg1 ;
-(id)localizedStringWithFormat:(id)arg1 timeZone:(id)arg2 ;
-(id)localizedAbbrevMonthWithDayInTimeZone:(id)arg1 ;
-(id)localizedFullMonthWithDay;
-(id)localizedAbbrevMonthWithDay;
-(id)localizedDayOfMonth;
-(id)localizedAbbrevWeekdayWithDayOfMonth;
-(id)localizedShortTimeInTimeZone:(id)arg1 ;
-(id)localizedHourInTimeZone:(id)arg1 ;
-(id)localizedHourMinutesWithoutAMPMInTimeZone:(id)arg1 ;
-(id)localizedStringForEventTimeInTimeZone:(id)arg1 ;
-(BOOL)CalIsBetweenStartDate:(id)arg1 endDate:(id)arg2 ;
-(id)dateBySubtractingCalSimulatedOffset;
-(id)toISO8601String;
-(long long)monthInCalendar:(id)arg1 ;
-(long long)dayInCalendar:(id)arg1 ;
-(id)dateOnlyByTranslatingFrom:(id)arg1 toCalendar:(id)arg2 ;
-(long long)secondInCalendar:(id)arg1 ;
-(id)dateByAddingWeeks:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingYears:(long long)arg1 inCalendar:(id)arg2 ;
-(id)CalDateByComponentwiseAddingMinutes:(long long)arg1 inCalendar:(id)arg2 ;
-(id)CalDateByComponentwiseAddingHours:(long long)arg1 inCalendar:(id)arg2 ;
-(id)roundSecondsDownInCalendar:(id)arg1 ;
-(id)roundSecondsAndMinutesDownInCalendar:(id)arg1 ;
-(id)roundSecondsAndMinutesUpInCalendar:(id)arg1 ;
-(id)roundToCurrentDayInCalendar:(id)arg1 ;
-(id)roundToCurrentMondayInCalendar:(id)arg1 ;
-(id)roundToCurrentMonthInCalendar:(id)arg1 ;
-(id)roundToCurrentYearInCalendar:(id)arg1 ;
-(BOOL)isSameMonthAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(id)localizedYear;
-(BOOL)isSameYearAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(BOOL)isBeforeDayForDate:(id)arg1 inCalendar:(id)arg2 ;
-(BOOL)isBeforeOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(BOOL)isAfterOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(BOOL)isTodayInCalendar:(id)arg1 ;
-(id)dateRoundedDownToNearestFiveMinutesInCalendar:(id)arg1 ;
-(id)dateRoundedToStartOfNextDayInCalendar:(id)arg1 ;
-(void)printComparisonToDate:(id)arg1 ;
-(id)localizedMonthShortened:(BOOL)arg1 ;
-(id)localizedMonthAndYearStringShortened:(BOOL)arg1 ;
-(id)localizedMonthAndDayStringShortened:(BOOL)arg1 ;
-(id)localizedYearMonthAndDayStringShortened:(BOOL)arg1 ;
-(id)localizedWeekdayMonthDayYearStringShortened:(BOOL)arg1 ;
-(id)localizedWeekNumber;
-(id)localizedWeekdayMonthYearStringShortened:(BOOL)arg1 ;
-(id)localizedRelativeDateStringShortened:(BOOL)arg1 ;
-(id)localizedRelativeDateStringShortened:(BOOL)arg1 lowercase:(BOOL)arg2 ;
-(long long)midnightOffsetMinutes:(id)arg1 ;
-(id)dateRemovingComponents:(unsigned long long)arg1 inCalendar:(id)arg2 ;
-(id)localizedFullMonth;
-(id)localizedFullDateAndTime;
-(id)localizedShortDateAndTime;
-(id)localizedFullDate;
-(id)localizedLongDate;
-(id)localizedAbbrevDate;
-(id)localizedDayOfWeekWithAbbrevDateInTimeZone:(id)arg1 ;
-(id)localizedShortDate;
-(id)localizedFullYearMonth;
-(id)localizedFullMonthWeekdayDay;
-(id)localizedAbbrevMonthWeekdayDay;
-(id)localizedShortMonthWithDay;
-(id)localizedMonthWithDayWithPreferredShortening;
-(id)localizedFullStandaloneWeekday;
-(id)localizedShortStandaloneWeekday;
-(id)localizedFullWeekdayWithDayOfMonth;
-(NSRange)rangeOfDayInLocalizedDateString:(id)arg1 ;
-(id)localizedAbbrevStandaloneMonth;
-(id)localizedAbbrevWeekdayWithDayOfMonthPreferWeekdayFirstForEnglish;
-(id)localizedAbbrevMonthWithDayRangeToDate:(id)arg1 ;
-(id)localizedTime;
-(id)localizedShortTime;
-(id)localizedHour;
-(id)localizedHourMinutesWithoutAMPM;
-(id)localizedHourWithoutAMPM;
-(id)localizedStringForEventTime;
-(id)dateForDayInTimeZone:(id)arg1 ;
-(id)ek_ios_dateForEndOfDayInTimeZone:(id)arg1 ;
-(id)localizedStringWithFormat:(id)arg1 ;
-(BOOL)isAfterDate:(id)arg1 ;
-(BOOL)isBeforeDate:(id)arg1 ;
-(id)dateByAddingDays:(long long)arg1 inCalendar:(id)arg2 ;
-(BOOL)isSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(id)dateOnlyComponentsInCalendar:(id)arg1 ;
-(id)dateForStartOfDayInTimeZone:(id)arg1 ;
-(BOOL)isSameWeekAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(id)roundToCurrentWeekInCalendar:(id)arg1 withFirstWeekdayIndex:(long long)arg2 ;
-(id)CalDateByComponentwiseAddingSeconds:(long long)arg1 inCalendar:(id)arg2 ;
-(BOOL)CalIsAfterDate:(id)arg1 ;
-(id)dateInTimeZone:(id)arg1 fromTimeZone:(id)arg2 ;
-(id)CalDateByComponentwiseAddingComponents:(id)arg1 inCalendar:(id)arg2 ;
-(BOOL)CalIsBeforeOrSameAsDate:(id)arg1 ;
-(BOOL)CalIsAfterOrSameAsDate:(id)arg1 ;
-(id)dateByAddingHours:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateRoundedToNearestFifteenMinutesInCalendar:(id)arg1 ;
-(BOOL)CalIsBeforeDate:(id)arg1 ;
-(void)sqliteBind:(sqlite3_stmtRef)arg1 index:(int)arg2 ;
-(BOOL)_af_isSameDayAsDate:(id)arg1 ;
-(BOOL)af_isToday;
-(BOOL)af_isTomorrow;
-(void)af_enumerateDigestibleChunksWithOptions:(unsigned long long)arg1 usingBlock:(/*^block*/id)arg2 ;
-(double)timeIntervalSince1970WithTimeZoneOffset:(double)arg1 ;
-(id)dedup;
-(id)dk_dedup;
-(id)cd_dateWithCeilingForAlignment:(double)arg1 withOffset:(double)arg2 inTimeZone:(id)arg3 ;
-(id)cd_dateWithFloorForAlignment:(double)arg1 ;
-(id)cd_dateWithCeilingForAlignment:(double)arg1 ;
-(id)cd_dateWithFloorForAlignment:(double)arg1 withOffset:(double)arg2 inTimeZone:(id)arg3 ;
-(id)floorDateWithTotalSlotsInDay:(int)arg1 ;
-(double)timeSinceMidnight:(id*)arg1 ;
-(int)slotFromMidnightWithTotalSlotsInDay:(int)arg1 ;
-(void)ck_bindInStatement:(id)arg1 atIndex:(unsigned long long)arg2 ;
-(id)_intents_readableTitleWithLocalizer:(id)arg1 metadata:(id)arg2 ;
-(id)_intents_encodeWithJSONEncoder:(id)arg1 codableDescription:(id)arg2 ;
-(id)ak_serverFriendlyString;
-(double)geo_julianDay;
-(double)geo_hoursAndMinutes;
-(BOOL)isAfterDate:(id)arg1 ;
-(BOOL)isBeforeDate:(id)arg1 ;
-(id)bs_dateByAddingDays:(long long)arg1 ;
-(int)daysSince1970;
-(id)descriptionWithCalendarFormat:(id)arg1 timeZone:(id)arg2 locale:(id)arg3 ;
-(id)dateWithCalendarFormat:(id)arg1 timeZone:(id)arg2 ;
-(Class)classForCoder;
-(BOOL)_web_isToday;
-(id)_web_RFC1123DateString;
-(long long)_web_compareDay:(id)arg1 ;
-(id)replacementObjectForPortCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(double)bucketToRoundingFactor:(unsigned)arg1 ;
-(double)timeIntervalSince1970WithBucket:(unsigned)arg1 ;
-(BOOL)isNSDate__;
-(BOOL)isInToday;
-(BOOL)isInTomorrow;
-(BOOL)isInYesterday;
-(BOOL)isEqualToDate:(id)arg1 ;
-(id)addTimeInterval:(double)arg1 ;
-(id)initWithTimeInterval:(double)arg1 sinceDate:(id)arg2 ;
-(double)timeIntervalSinceDate:(id)arg1 ;
-(double)timeIntervalSinceReferenceDate;
-(BOOL)isInSameDayAsDate:(id)arg1 ;
-(BOOL)isEqual:(id)arg1 toUnitGranularity:(unsigned long long)arg2 ;
-(id)initWithTimeIntervalSince1970:(double)arg1 ;
-(long long)compare:(id)arg1 toUnitGranularity:(unsigned long long)arg2 ;
-(id)dateByAddingTimeInterval:(double)arg1 ;
-(id)initWithTimeIntervalSinceNow:(double)arg1 ;
-(unsigned long long)_cfTypeID;
-(id)initWithTimeIntervalSinceReferenceDate:(double)arg1 ;
-(id)initWithDate:(id)arg1 ;
-(id)descriptionWithLocale:(id)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(id)earlierDate:(id)arg1 ;
-(double)timeIntervalSinceNow;
-(long long)compare:(id)arg1 ;
-(id)initWithString:(id)arg1 ;
-(BOOL)isEqual:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(id)laterDate:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(unsigned long long)hash;
-(double)timeIntervalSince1970;
-(NSString *)description;
@end

