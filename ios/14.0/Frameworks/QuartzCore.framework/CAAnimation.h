/*
* This header is generated by classdump-dyld 1.0
* on Thursday, September 24, 2020 at 12:47:29 AM British Summer Time
* Operating System: Version 14.0 (Build 18A373)
* Image Source: /System/Library/Frameworks/QuartzCore.framework/QuartzCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <QuartzCore/QuartzCore-Structs.h>
#import <libobjc.A.dylib/NSMutableCopying.h>
#import <libobjc.A.dylib/CAPropertyInfo.h>
#import <libobjc.A.dylib/NSSecureCoding.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/CAMediaTiming.h>
#import <libobjc.A.dylib/CAAction.h>

@class NSArray, CAStateControllerTransition, NSString, CAMediaTimingFunction;

@interface CAAnimation : NSObject <NSMutableCopying, CAPropertyInfo, NSSecureCoding, NSCopying, CAMediaTiming, CAAction> {

	void* _attr;
	unsigned _flags;

}

@property (assign) long long _mapkit_ID; 
@property (assign) BOOL usesSceneTimeBase; 
@property (assign) double fadeInDuration; 
@property (assign) double fadeOutDuration; 
@property (nonatomic,copy) NSArray * animationEvents; 
@property (__weak) CAStateControllerTransition * CAStateControllerTransition; 
@property (getter=isEnabled) BOOL enabled; 
@property (copy) NSString * beginTimeMode; 
@property (assign) double frameInterval; 
@property (assign) long long preferredFramesPerSecond; 
@property (assign) BOOL discretizesTime; 
@property (retain) CAMediaTimingFunction * timingFunction; 
@property (retain) id<CAAnimationDelegate> delegate; 
@property (getter=isRemovedOnCompletion) BOOL removedOnCompletion; 
@property (assign) double beginTime; 
@property (assign) double duration; 
@property (assign) float speed; 
@property (assign) double timeOffset; 
@property (assign) float repeatCount; 
@property (assign) double repeatDuration; 
@property (assign) BOOL autoreverses; 
@property (copy) NSString * fillMode; 
+(id)pkui_shakeAnimation;
+(id)pkui_shakeAnimationWithInitalOffest:(double)arg1 springStiffness:(double)arg2 springDamping:(double)arg3 ;
+(id)pkui_smallShakeAnimation;
+(id)TSD_supportedKeyPaths;
+(id)ak_jiggleAnimation;
+(id)animationWithSCNAnimation:(id)arg1 ;
+(BOOL)CA_automaticallyNotifiesObservers:(Class)arg1 ;
+(BOOL)supportsSecureCoding;
+(id)properties;
+(id)animation;
+(void)CAMLParserStartElement:(id)arg1 ;
+(/*function pointer*/void*)CA_setterForProperty:(const CAPropertyInfo*)arg1 ;
+(id)defaultValueForKey:(id)arg1 ;
+(/*function pointer*/void*)CA_getterForProperty:(const CAPropertyInfo*)arg1 ;
+(BOOL)CA_encodesPropertyConditionally:(unsigned)arg1 type:(int)arg2 ;
+(BOOL)automaticallyNotifiesObserversForKey:(id)arg1 ;
+(BOOL)resolveInstanceMethod:(SEL)arg1 ;
-(id)TSD_valueForKeyPath:(id)arg1 atTime:(double)arg2 ;
-(id)TSDCAAnimationContextCache;
-(void)pop_applyDragCoefficient;
-(void)cps_setDelegateWithDidStartHandler:(/*^block*/id)arg1 didStopHandler:(/*^block*/id)arg2 ;
-(void)pkui_setCompletionHandler:(/*^block*/id)arg1 ;
-(/*^block*/id)pkui_didStartHandler;
-(void)pkui_setDidStartHandler:(/*^block*/id)arg1 ;
-(/*^block*/id)pkui_completionHandler;
-(id)TSD_valueForKeyPath:(id)arg1 atTime:(double)arg2 animationCache:(id)arg3 ;
-(id)TSD_valueAtTime:(double)arg1 initialValue:(id)arg2 ;
-(void)p_getValue:(id*)arg1 animationPercent:(double*)arg2 atTime:(double)arg3 initialValue:(id)arg4 ;
-(id)TSD_valueForKeyPath:(id)arg1 atTime:(double)arg2 ;
-(double)TSD_animationPercentByApplyingTimingFunctionForKeyPath:(id)arg1 atTime:(double)arg2 ;
-(BOOL)TSD_containsAnimationForKeyPath:(id)arg1 ;
-(id)TSD_animationForKeyPath:(id)arg1 atTime:(double)arg2 ;
-(id)_lp_copyWithBeginTime:(double)arg1 ;
-(/*^block*/id)laui_didStartHandler;
-(void)laui_setDidStartHandler:(/*^block*/id)arg1 ;
-(/*^block*/id)laui_didStopHandler;
-(void)laui_setDidStopHandler:(/*^block*/id)arg1 ;
-(void)set_mapkit_ID:(long long)arg1 ;
-(long long)_mapkit_ID;
-(double)fadeOutDuration;
-(void)setFadeInDuration:(double)arg1 ;
-(double)fadeInDuration;
-(void)setFadeOutDuration:(double)arg1 ;
-(void)setUsesSceneTimeBase:(BOOL)arg1 ;
-(BOOL)usesSceneTimeBase;
-(void)setCommitsOnCompletion:(BOOL)arg1 ;
-(BOOL)commitsOnCompletion;
-(void)setAnimationEvents:(NSArray *)arg1 ;
-(NSArray *)animationEvents;
-(void)setTimingFunction:(CAMediaTimingFunction *)arg1 ;
-(void)setRepeatCount:(float)arg1 ;
-(NSString *)fillMode;
-(void)setAutoreverses:(BOOL)arg1 ;
-(void)setBeginTime:(double)arg1 ;
-(double)repeatDuration;
-(void)setFillMode:(NSString *)arg1 ;
-(void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3 ;
-(BOOL)shouldArchiveValueForKey:(id)arg1 ;
-(void)setValue:(id)arg1 forUndefinedKey:(id)arg2 ;
-(id)mutableCopyWithZone:(NSZone*)arg1 ;
-(BOOL)CAMLTypeSupportedForKey:(id)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(BOOL)_setCARenderAnimation:(Animation*)arg1 layer:(id)arg2 ;
-(void)setRepeatDuration:(double)arg1 ;
-(Object*)CA_copyRenderValue;
-(unsigned)_propertyFlagsForLayer:(id)arg1 ;
-(double)frameInterval;
-(CAMediaTimingFunction *)timingFunction;
-(void)setFrameInterval:(double)arg1 ;
-(id)valueForKey:(id)arg1 ;
-(void)setSpeed:(float)arg1 ;
-(void)setTimeOffset:(double)arg1 ;
-(void)setPreferredFramesPerSecond:(long long)arg1 ;
-(double)duration;
-(id)valueForUndefinedKey:(id)arg1 ;
-(BOOL)isEnabled;
-(double)timeOffset;
-(void)setDuration:(double)arg1 ;
-(id)debugDescription;
-(void)dealloc;
-(void)setDefaultDuration:(double)arg1 ;
-(id)valueForKeyPath:(id)arg1 ;
-(void)setRemovedOnCompletion:(BOOL)arg1 ;
-(double)beginTime;
-(id)CAMLTypeForKey:(id)arg1 ;
-(BOOL)autoreverses;
-(long long)preferredFramesPerSecond;
-(NSString *)beginTimeMode;
-(void)setDelegate:(id<CAAnimationDelegate>)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(void)applyForTime:(double)arg1 presentationObject:(id)arg2 modelObject:(id)arg3 ;
-(void)encodeWithCoder:(id)arg1 ;
-(id<CAAnimationDelegate>)delegate;
-(float)speed;
-(BOOL)isRemovedOnCompletion;
-(BOOL)removedOnCompletion;
-(BOOL)discretizesTime;
-(void)setDiscretizesTime:(BOOL)arg1 ;
-(void)setValue:(id)arg1 forKey:(id)arg2 ;
-(void)setValue:(id)arg1 forKeyPath:(id)arg2 ;
-(void)setEnabled:(BOOL)arg1 ;
-(void)setBeginTimeMode:(NSString *)arg1 ;
-(void)runActionForKey:(id)arg1 object:(id)arg2 arguments:(id)arg3 ;
-(void)encodeWithCAMLWriter:(id)arg1 ;
-(float)repeatCount;
@end

