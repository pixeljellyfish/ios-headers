//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Nov 12 2019 23:20:19).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSMutableDictionary, NSMutableSet, NSString, NSURL, SYDApplicationScheduling, SYDJournal, SYDScheduler, SYDWriteTracker;

@interface SYDApplication : NSObject
{
    _Bool _inactive;
    _Bool _isAvailableOnThisPlatform;
    _Bool _isAdditionalStore;
    _Bool _daemon;
    _Bool _shouldResetOnFirstSync;
    _Bool _simulatePushNotification;
    NSString *_storeIdentifier;
    SYDScheduler *_scheduler;
    SYDApplicationScheduling *_scheduling;
    NSString *_bundleIdentifier;
    NSString *_schedulerIdentifier;
    NSString *_additionalChangeNotificationName;
    NSURL *_plistURL;
    NSMutableDictionary *_plistCache;
    NSMutableSet *_pendingDirtyKeys;
    NSMutableDictionary *_pendingLocalData;
    long long _changeCount;
    long long _initialSyncChangeCount;
    SYDJournal *_journal;
    unsigned long long _debugCount;
    SYDWriteTracker *_writeTracker;
}

+ (id)additionalStoreIdentifiersForBundleIdentifier:(id)arg1 installInfo:(id)arg2;
+ (_Bool)installInfoAllowsKeyValueStore:(id)arg1 forBundleIdentifier:(id)arg2;
+ (id)knownDaemons;
+ (id)defaultSchedulerIdentifierForStoreIdentifier:(id)arg1;
+ (_Bool)storeIdentifierShouldResetOnDisable:(id)arg1;
+ (_Bool)storeIdentifierIsRegisteredWithMultipleInternalApps:(id)arg1;
+ (Class)classForSchedulerWithIdentifier:(id)arg1;
+ (id)schedulerIdentifiers;
+ (id)defaultSchedulerIdentifier;
+ (id)_schedulerIdentifierMapping;
- (void).cxx_destruct;
@property(readonly, nonatomic) SYDWriteTracker *writeTracker; // @synthesize writeTracker=_writeTracker;
@property(nonatomic) _Bool simulatePushNotification; // @synthesize simulatePushNotification=_simulatePushNotification;
@property(nonatomic) unsigned long long debugCount; // @synthesize debugCount=_debugCount;
@property(retain, nonatomic) SYDJournal *journal; // @synthesize journal=_journal;
@property(nonatomic) long long initialSyncChangeCount; // @synthesize initialSyncChangeCount=_initialSyncChangeCount;
@property(nonatomic) long long changeCount; // @synthesize changeCount=_changeCount;
@property(retain, nonatomic) NSMutableDictionary *pendingLocalData; // @synthesize pendingLocalData=_pendingLocalData;
@property(retain, nonatomic) NSMutableSet *pendingDirtyKeys; // @synthesize pendingDirtyKeys=_pendingDirtyKeys;
@property(retain, nonatomic) NSMutableDictionary *plistCache; // @synthesize plistCache=_plistCache;
@property(retain, nonatomic) NSURL *plistURL; // @synthesize plistURL=_plistURL;
@property(nonatomic) _Bool shouldResetOnFirstSync; // @synthesize shouldResetOnFirstSync=_shouldResetOnFirstSync;
@property(retain, nonatomic) NSString *additionalChangeNotificationName; // @synthesize additionalChangeNotificationName=_additionalChangeNotificationName;
@property(nonatomic) _Bool daemon; // @synthesize daemon=_daemon;
@property(nonatomic) _Bool isAdditionalStore; // @synthesize isAdditionalStore=_isAdditionalStore;
@property(retain, nonatomic) NSString *schedulerIdentifier; // @synthesize schedulerIdentifier=_schedulerIdentifier;
@property(retain, nonatomic) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(retain, nonatomic) SYDApplicationScheduling *scheduling; // @synthesize scheduling=_scheduling;
@property(nonatomic) _Bool isAvailableOnThisPlatform; // @synthesize isAvailableOnThisPlatform=_isAvailableOnThisPlatform;
@property(nonatomic) _Bool inactive; // @synthesize inactive=_inactive;
@property(retain, nonatomic) SYDScheduler *scheduler; // @synthesize scheduler=_scheduler;
- (int)filteredSyncReasonForReason:(int)arg1;
- (id)diagnosticDescription;
- (void)accountDidChange:(int)arg1;
- (void)deactivateWithHandler:(CDUnknownBlockType)arg1;
- (id)persistentState;
- (void)performWithoutTransaction:(CDUnknownBlockType)arg1;
- (void)perform:(CDUnknownBlockType)arg1;
- (void)_perform:(CDUnknownBlockType)arg1 takeTransaction:(_Bool)arg2;
- (void)didReceiveMemoryWarning;
- (void)resetSyncState;
- (void)resetAllValuesForce:(_Bool)arg1;
- (_Bool)wasSyncSuccessfulWithServerChanges:(id)arg1;
- (void)stopSynchronizingWithServerChanges:(id)arg1 reason:(int)arg2;
- (void)_stopSynchronizingWithServerChanges:(id)arg1;
- (void)setDefaultsConfig:(id)arg1;
- (void *)applyMergePolicy:(int)arg1 conflictPolicy:(int)arg2 forKey:(struct __CFString *)arg3 localValue:(void *)arg4 remoteValue:(void *)arg5 baseValue:(void *)arg6;
- (id)mergeLocalDictionary:(id)arg1 remoteDictionary:(id)arg2 baseDictionary:(id)arg3 conflictPolicy:(int)arg4;
- (id)mergeLocalArray:(id)arg1 remoteArray:(id)arg2 baseArray:(id)arg3 conflictPolicy:(int)arg4;
- (void)_logStoreAfterMerge;
- (void)_logStoreBeforeMergeWithRemoteChanges:(id)arg1;
- (id)_logLock;
- (void)_logTo:(id)arg1 store:(id)arg2 tag:(id)arg3;
- (id)startSynchronizingWithReason:(int)arg1;
- (id)storeLocalChanges:(id)arg1 withKnownChangeCount:(long long)arg2;
- (void)discardJournalEntriesWithChangeCount:(long long)arg1;
- (_Bool)_writePlistIfNecessary;
- (_Bool)_writePlistIfNecessaryHelper;
- (void)_loadPlistIfNecessary;
- (void)_loadPlistIfNecessaryHelper;
- (void)_discardPlistIfPossible;
- (void)_discardPlistForced:(_Bool)arg1;
@property(copy, nonatomic) NSString *storeIdentifier; // @synthesize storeIdentifier=_storeIdentifier;
- (id)description;
- (int)_refreshStoreIdentifierWithInstallInfo:(id)arg1;
- (int)refreshStoreIdentifierWithServer:(id)arg1;
- (id)initAdditionalStoreWithBundleIdentifier:(id)arg1 storeIdentifier:(id)arg2 persistentState:(id)arg3 writeTracker:(id)arg4;
- (id)initAdditionalStoreWithBundleIdentifier:(id)arg1 storeIdentifier:(id)arg2 writeTracker:(id)arg3;
- (id)initWithBundleIdentifier:(id)arg1 persistentState:(id)arg2 writeTracker:(id)arg3;
- (id)initWithBundleIdentifier:(id)arg1 writeTracker:(id)arg2;
- (id)_initWithBundleIdentifier:(id)arg1 storeIdentifier:(id)arg2 persistentState:(id)arg3 writeTracker:(id)arg4;
@property(readonly, nonatomic) NSString *displayIdentifier;
- (void)endDebuggingStore;
- (void)beginDebuggingStore;
- (_Bool)isCloudSyncAllowed;
@property(readonly, nonatomic, getter=isDevelopmentApp) _Bool developmentApp;

@end

