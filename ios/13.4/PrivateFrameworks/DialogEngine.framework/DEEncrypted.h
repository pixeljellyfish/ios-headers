//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Nov 12 2019 23:20:19).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@interface DEEncrypted : NSObject
{
}

+ (id)versionFile:(id)arg1;
+ (_Bool)encryptFrom:(id)arg1 to:(id)arg2 keyId:(unsigned long long)arg3 multipart:(_Bool)arg4;
+ (_Bool)decryptFrom:(id)arg1 to:(id)arg2 version:(id)arg3;
+ (id)decryptFrom:(id)arg1 name:(id)arg2 base:(id)arg3;
+ (id)encryptFrom:(id)arg1 name:(id)arg2 base:(id)arg3 keyId:(unsigned long long)arg4 multipart:(_Bool)arg5;
+ (id)encrypt:(id)arg1 keyId:(unsigned long long)arg2 multipart:(_Bool)arg3;
+     // Error parsing type: B44@0:8@16@24^{Encrypted=^^?{InternalMetadataWithArenaLite=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}B}32B40, name: wrapFrom:to:encrytpedPb:multipart:
+     // Error parsing type: B48@0:8@16@24Q32^{Encrypted=^^?{InternalMetadataWithArenaLite=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}B}40, name: encryptFrom:to:keyId:encrytpedPb:
+ (id)decrypt:(id)arg1;
+ (id)decrypt:(id)arg1 keyVersion:(id *)arg2;
+ (_Bool)decryptFrom:(id)arg1 to:(id)arg2 keyVersion:(id *)arg3;
+ (id)readDataOfLength:(unsigned long long)arg1 from:(id)arg2 or:(id)arg3;
+ (id)getKeyWithVersion:(id)arg1;
+ (id)getKey:(unsigned long long)arg1;

@end

