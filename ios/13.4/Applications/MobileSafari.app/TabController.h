//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Nov 12 2019 23:20:19).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "RecentlyClosedTabViewControllerDelegate-Protocol.h"
#import "TabBarDelegate-Protocol.h"
#import "TabDocumentDragDropDataSource-Protocol.h"
#import "TabOverviewDelegate-Protocol.h"
#import "TabSnapshotCacheDelegate-Protocol.h"
#import "TiltedTabViewDelegate-Protocol.h"
#import "WBSTabOrderProvider-Protocol.h"

@class Application, BrowserController, CloudTabStore, NSArray, NSMapTable, NSMutableArray, NSSet, NSString, NSTimer, NSUUID, RecentlyClosedTabViewController, TabBar, TabDocument, TabOverview, TabSnapshotCache, TiltedTabView, UIBarButtonItem, UIView, WBSTabOrderManager, _SFBrowserSavedState;
@protocol TabCollectionView, TabThumbnailCollectionView, WBSOrderedTab;

@interface TabController : NSObject <RecentlyClosedTabViewControllerDelegate, TabBarDelegate, TabOverviewDelegate, TabSnapshotCacheDelegate, TiltedTabViewDelegate, WBSTabOrderProvider, TabDocumentDragDropDataSource>
{
    BrowserController *_browserController;
    NSMutableArray *_normalTabDocuments;
    NSMutableArray *_privateTabDocuments;
    NSTimer *_saveStateTimer;
    NSTimer *_stateValidateTimer;
    TabDocument *_tabDocumentBeingHiddenFromTabView;
    UIBarButtonItem *_tiltedTabViewAddTabButton;
    UIBarButtonItem *_tiltedTabViewPrivateBrowsingButton;
    NSTimer *_updateContinuityTimer;
    _Bool _tabBarItemsFixed;
    _Bool _tabViewItemsFixed;
    RecentlyClosedTabViewController *_recentlyClosedTabController;
    TabSnapshotCache *_snapshotCache;
    _Bool _flushPendingSnapshots;
    CDUnknownBlockType _flushPendingSnapshotsCompletion;
    _Bool _didRestoreCloudTabsForEducationDevice;
    _Bool _didReceiveFirstCloudTabDeviceUpdateNotification;
    TabDocument *_tabDocumentBeingDragged;
    NSArray *_tabDocumentsToKeepVisible;
    NSMapTable *_uuidToTabDocumentMap;
    NSUUID *_blankDocumentGroupIdentifier;
    NSUUID *_privateBlankDocumentGroupIdentifier;
    _Bool _switchingActiveDocument;
    _Bool _isClosingDocuments;
    NSString *_lastSearchTerm;
    NSArray *_searchTermWords;
    unsigned long long _veryRecentlyClosedTabCount;
    unsigned long long _tabsClosedWhileTabViewPresentedCount;
    NSTimer *_veryRecentlyClosedTabCountInvalidationTimer;
    _Bool _snapshotsAreEnabled;
    _Bool _tabsAreOnLease;
    _Bool _shouldTogglePrivateBrowsingOnSplit;
    _Bool _shouldDeferSnapshotRequest;
    TabDocument *_privateActiveTabDocument;
    TabDocument *_normalActiveTabDocument;
    _SFBrowserSavedState *_savedState;
    long long _privateBrowsingMode;
    WBSTabOrderManager *_tabOrderManager;
    TabBar *_tabBar;
    TiltedTabView *_tiltedTabView;
    TabOverview *_tabOverview;
    long long _tabThumbnailCollectionViewStyle;
    long long _tabDisplayMode;
}

+ (id)_tabDocumentsHiddenFromTabViews;
- (void).cxx_destruct;
@property(nonatomic) _Bool shouldDeferSnapshotRequest; // @synthesize shouldDeferSnapshotRequest=_shouldDeferSnapshotRequest;
@property(nonatomic) _Bool shouldTogglePrivateBrowsingOnSplit; // @synthesize shouldTogglePrivateBrowsingOnSplit=_shouldTogglePrivateBrowsingOnSplit;
@property(nonatomic) _Bool tabsAreOnLease; // @synthesize tabsAreOnLease=_tabsAreOnLease;
@property(nonatomic) long long tabDisplayMode; // @synthesize tabDisplayMode=_tabDisplayMode;
@property(nonatomic) _Bool snapshotsAreEnabled; // @synthesize snapshotsAreEnabled=_snapshotsAreEnabled;
@property(nonatomic) long long tabThumbnailCollectionViewStyle; // @synthesize tabThumbnailCollectionViewStyle=_tabThumbnailCollectionViewStyle;
@property(readonly, retain, nonatomic) TabOverview *tabOverview; // @synthesize tabOverview=_tabOverview;
@property(readonly, retain, nonatomic) TiltedTabView *tiltedTabView; // @synthesize tiltedTabView=_tiltedTabView;
@property(nonatomic) __weak TabBar *tabBar; // @synthesize tabBar=_tabBar;
@property(readonly, nonatomic) WBSTabOrderManager *tabOrderManager; // @synthesize tabOrderManager=_tabOrderManager;
@property(nonatomic) long long privateBrowsingMode; // @synthesize privateBrowsingMode=_privateBrowsingMode;
@property(retain, nonatomic) _SFBrowserSavedState *savedState; // @synthesize savedState=_savedState;
@property(retain, nonatomic) TabDocument *normalActiveTabDocument; // @synthesize normalActiveTabDocument=_normalActiveTabDocument;
@property(retain, nonatomic) TabDocument *privateActiveTabDocument; // @synthesize privateActiveTabDocument=_privateActiveTabDocument;
@property(readonly, copy, nonatomic) NSArray *privateTabDocuments; // @synthesize privateTabDocuments=_privateTabDocuments;
@property(readonly, copy, nonatomic) NSArray *tabDocuments; // @synthesize tabDocuments=_normalTabDocuments;
- (unsigned long long)indexForTab:(id)arg1;
@property(readonly, nonatomic) unsigned long long numberOfTabs;
@property(readonly, nonatomic) id <WBSOrderedTab> selectedTabForTabOrderProvider;
- (id)originatingTabForTab:(id)arg1;
- (id)tabAtIndex:(unsigned long long)arg1;
@property(readonly, nonatomic) unsigned long long indexOfSelectedTab;
- (void)didTransitionTabView;
- (void)willTransitionTabView;
@property(readonly, nonatomic) NSArray *tabDocumentsMatchingSearchTerm;
- (void)_updateUserActivityTimerFired;
- (void)saveTabDocumentUserActivitySoon:(id)arg1;
- (void)_cancelPendingUpdateUserActivityTimer;
- (unsigned long long)_snapshotCacheCapacityWithSnapshotsEnabled:(_Bool)arg1;
- (unsigned long long)_snapshotCacheCapacity;
- (unsigned long long)capacityForTabSnapshotCache:(id)arg1;
- (_Bool)tabSnapshotCacheShouldDeferNextSnapshotRequest:(id)arg1;
- (_Bool)tabSnapshotCache:(id)arg1 shouldRequestSavedSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCacheDidFinishUpdating:(id)arg1;
- (void)_updateTabSnapshotsWithIdentifier:(id)arg1 animated:(_Bool)arg2;
- (void)_updateTabSnapshotsAnimated:(_Bool)arg1;
- (void)tabSnapshotCache:(id)arg1 didEvictSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCache:(id)arg1 didCacheSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCache:(id)arg1 requestSnapshotWithIdentifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)requestSnapshotForTabDocument:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)_cachedContentImageForTabDocument:(id)arg1 allowScaledImage:(_Bool)arg2;
- (id)cachedContentImageForTabDocument:(id)arg1;
- (void)flushPendingSnapshotsWithCompletion:(CDUnknownBlockType)arg1;
- (void)_updateSnapshotCacheStateWithCapacity:(unsigned long long)arg1;
- (void)_updateSnapshotCacheState;
- (void)invalidateSnapshotForTabDocument:(id)arg1;
- (void)_updateSnapshotIdentifiers;
- (void)_updateTabOverviewItems;
@property(readonly, nonatomic) _Bool usesTabOverview;
- (void)_setUpTabOverview;
- (_Bool)_tabItem:(id)arg1 matchesSearchText:(id)arg2;
- (void)tabOverviewDidChangeAllowsInteractivePresentation:(id)arg1;
- (void)_createPlaceholderImageForTabDocument:(id)arg1;
- (void)_addNewActiveTabOverviewTab;
- (id)itemsToKeepVisibleForTabOverview:(id)arg1;
- (id)currentItemForTabOverview:(id)arg1;
- (void)tabOverviewDidCancelDismissal:(id)arg1;
- (void)tiltedTabViewDidEndSearching:(id)arg1;
- (void)tiltedTabViewWillBeginSearching:(id)arg1;
- (void)_addNewActiveTiltedTabViewTab;
- (struct CGSize)suggestedSnapshotSizeForTiltedTabView:(id)arg1;
- (void)tiltedTabView:(id)arg1 animateTopBackdropView:(id)arg2 hidden:(_Bool)arg3;
- (id)expectedSuperviewForTiltedTabView:(id)arg1;
- (id)itemsToKeepVisibleForTiltedTabView:(id)arg1;
- (id)currentItemForTiltedTabView:(id)arg1;
- (void)_updateCloudTabStorePeriodicUpdates;
- (void)showTabExposePopoverForTabCollectionView:(id)arg1;
- (_Bool)tabCollectionView:(id)arg1 cloudTab:(id)arg2 matchesSearchText:(id)arg3;
- (_Bool)tabCollectionView:(id)arg1 item:(id)arg2 matchesSearchText:(id)arg3;
- (void)tabCollectionView:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3;
- (void)tabCollectionView:(id)arg1 relinquishBorrowedContentView:(id)arg2 forItem:(id)arg3;
- (id)tabCollectionView:(id)arg1 borrowContentViewForItem:(id)arg2 withTopBackdropView:(id *)arg3 ofHeight:(double)arg4;
- (struct UIEdgeInsets)effectiveSafeAreaInsetsForTabCollectionView:(id)arg1;
- (double)tabCollectionView:(id)arg1 headerHeightForItem:(id)arg2;
- (void)tabCollectionViewDidUpdateItemVisibilityOrder:(id)arg1;
- (id)tabCollectionView:(id)arg1 snapshotForItem:(id)arg2;
- (_Bool)tabCollectionView:(id)arg1 validSnapshotExistsForItem:(id)arg2;
- (void)tabCollectionViewEndIgnoringUserInteraction:(id)arg1 reason:(id)arg2;
- (void)tabCollectionViewBeginIgnoringUserInteraction:(id)arg1 reason:(id)arg2;
- (void)tabCollectionViewDidDismiss:(id)arg1;
- (void)tabCollectionViewWillDismiss:(id)arg1;
- (void)tabCollectionViewDidPresent:(id)arg1;
- (_Bool)_shouldSnapshotActiveTab;
- (void)tabCollectionViewWillPresent:(id)arg1;
- (void)tabCollectionView:(id)arg1 item:(id)arg2 didProduceNavigationIntent:(id)arg3;
- (void)tabCollectionView:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3;
- (void)tabCollectionView:(id)arg1 closeItem:(id)arg2;
- (_Bool)tabCollectionView:(id)arg1 canCloseItem:(id)arg2;
- (void)tabCollectionView:(id)arg1 didSelectItem:(id)arg2;
@property(readonly, nonatomic) UIView<TabThumbnailCollectionView> *tabThumbnailCollectionView;
- (void)_clearHiddenTabDocumentForTabViewDismissal;
- (void)_dismissTabView;
- (void)didEndTrackingSession:(id)arg1;
- (void)didBeginTrackingSession:(id)arg1;
- (void)tabDocumentDidUpdateUUID:(id)arg1 previousUUID:(id)arg2;
- (void)willLoseOwnershipOfTabDocument:(id)arg1;
- (void)didGainOwnershipOfTabDocument:(id)arg1;
- (id)tabDocumentWithUUID:(id)arg1;
- (void)_setTabDocuments:(id)arg1 hidden:(_Bool)arg2;
- (void)unhideTabDocuments:(id)arg1;
- (void)hideTabDocuments:(id)arg1;
- (id)replacePlaceholderTabDocument:(id)arg1 withTabDocuments:(id)arg2 transitionToDragStateWithBlock:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) UIView<TabCollectionView> *tabCollectionView;
- (id)restoreRecentlyClosedTabDocumentWithTabStateData:(id)arg1;
- (void)_doneLongPress:(id)arg1;
- (void)_doneLongPressRecognized:(id)arg1;
- (void)_addTabLongPress:(id)arg1;
- (void)_addTabLongPressRecognized:(id)arg1;
- (void)updateTiltedTabViewToolbarItems:(_Bool)arg1;
- (_Bool)_privateBrowsingButtonSelected;
- (void)_updateTiltedTabViewPrivateBrowsingButtonVisibility;
@property(readonly, nonatomic) NSArray *tiltedTabViewToolbarItems;
- (id)_makeOpenNewTabInteraction;
- (void)_updateTabViewCloudTabs;
- (void)updateEducationTabsLastSyncDate;
- (void)_restoreEducationTabsIfNecessaryAnimated:(_Bool)arg1;
- (void)restoreEducationDeviceTabs;
- (void)_cloudTabsDidUpdate:(id)arg1;
- (void)_updateTiltedTabViewItemsWithTransition:(long long)arg1;
- (void)_updateTiltedTabViewItemsAnimated:(_Bool)arg1;
- (void)_updateTiltedTabViewItems;
- (void)_setUpTiltedTabView;
@property(readonly, nonatomic) _Bool usesTiltedTabView;
- (void)updateTabViewsAnimatingTabBar:(_Bool)arg1;
- (void)_updateExplanationViewVisibilityAnimated:(_Bool)arg1;
- (_Bool)_shouldShowExplanationView;
- (void)_suppressSingleEmptyTabIfAppropriate;
- (void)_openBlankTabDocumentInTabBarWithOptions:(long long)arg1;
- (void)updateTabBarAnimated:(_Bool)arg1;
- (void)_updateTabBarAnimated:(_Bool)arg1 keepingDocumentVisible:(id)arg2;
- (void)recentlyClosedTabViewController:(id)arg1 didSelectTabStateWithData:(id)arg2;
- (void)_adoptTabsFromTabController:(id)arg1 forPrivateBrowsing:(_Bool)arg2;
- (void)adoptTabsFromTabController:(id)arg1;
- (_Bool)_tabsAreAllEmpty:(id)arg1;
- (id)_newPlaceholderTabDocumentForURL:(id)arg1 privateBrowsing:(_Bool)arg2 atIndex:(unsigned long long)arg3;
- (id)insertPlaceholderTabDocumentAfterDocument:(id)arg1;
- (void)tabBar:(id)arg1 toggleMediaCaptureMutedForItem:(id)arg2;
- (_Bool)tabBar:(id)arg1 canMoveItem:(id)arg2;
- (void)_setTabBarItemsFixed:(_Bool)arg1;
- (void)_tabView:(id)arg1 handleNavigationIntent:(id)arg2 usingTabDocument:(id)arg3;
- (void)_performWithFixedTabViewItems:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) Application *_application;
- (void)_updateAddTabButtonEnabled;
- (void)setPrivateBrowsingMode:(long long)arg1 animated:(_Bool)arg2;
@property(nonatomic, getter=isPrivateBrowsingEnabled) _Bool privateBrowsingEnabled;
@property(readonly, nonatomic, getter=isControlledByAutomation) _Bool controlledByAutomation;
- (_Bool)_canCloseLastTab;
- (void)clearBrowserController;
- (void)dealloc;
- (_Bool)needsCloudTabPeriodicUpdates;
@property(readonly, nonatomic) CloudTabStore *cloudTabStore;
- (void)_didReceiveMemoryWarning:(id)arg1;
- (id)initWithBrowserController:(id)arg1;
- (void)openInitialBlankTabDocumentAndMakeActive:(_Bool)arg1;
- (void)openInitialBlankTabDocumentIfNeeded;
- (void)replaceTabDocument:(id)arg1 withTabDocument:(id)arg2;
- (id)_tabDocumentForURL:(id)arg1 withUUID:(id)arg2;
- (void)sortTabsWithMode:(long long)arg1;
- (id)tabDocumentForURL:(id)arg1;
- (void)moveTabDocument:(id)arg1 overTabDocument:(id)arg2;
- (void)closeTabDocuments:(id)arg1 animated:(_Bool)arg2;
- (void)closeTabDocuments:(id)arg1;
- (void)closeAllOpenTabsAnimated:(_Bool)arg1 temporarily:(_Bool)arg2;
- (void)closeAllOpenTabsAnimated:(_Bool)arg1;
- (void)closeOtherTabs;
- (void)closeTab;
- (void)_closeTabDocuments:(id)arg1 animated:(_Bool)arg2 temporarily:(_Bool)arg3 allowAddingToRecentlyClosedTabs:(_Bool)arg4 keepWebViewAlive:(_Bool)arg5;
- (void)_closeTabDocument:(id)arg1 animated:(_Bool)arg2 temporarily:(_Bool)arg3 allowAddingToRecentlyClosedTabs:(_Bool)arg4 keepWebViewAlive:(_Bool)arg5;
- (void)_detachTabDocuments:(id)arg1 nextActiveDocument:(id)arg2;
- (void)_closeTabDocument:(id)arg1 animated:(_Bool)arg2 allowAddingToRecentlyClosedTabs:(_Bool)arg3;
- (void)_closeTabDocument:(id)arg1 animated:(_Bool)arg2 temporarily:(_Bool)arg3;
- (void)detachTabDocument:(id)arg1 animated:(_Bool)arg2;
- (void)closeTabDocumentWithURL:(id)arg1 UUID:(id)arg2;
- (void)closeTabDocument:(id)arg1 animated:(_Bool)arg2;
- (_Bool)_shouldFocusPreviousDocumentWhenClosingDocument:(id)arg1;
- (void)openNewTabWithOptions:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_newTabFromTabViewButton;
- (id)_openBlankTabDocument;
- (id)insertInitialBlankTabDocumentWithPrivateBrowsingIfNeeded:(_Bool)arg1;
- (id)blankTabDocumentToReuseAllowingReorder:(_Bool)arg1;
- (id)blankTabDocumentToReuse;
- (void)insertNewBlankTabDocumentAnimated:(_Bool)arg1;
- (id)_insertNewBlankTabDocumentWithOptions:(long long)arg1 inBackground:(_Bool)arg2 animated:(_Bool)arg3;
- (id)_insertNewBlankTabDocumentWithPrivateBrowsing:(_Bool)arg1 inBackground:(_Bool)arg2 animated:(_Bool)arg3;
- (void)insertNewTabDocumentWithDefaultOrdering:(id)arg1 inBackground:(_Bool)arg2 animated:(_Bool)arg3;
- (void)insertNewTabDocument:(id)arg1 forcingOrderAfterTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;
- (_Bool)_usesPrivateBrowsingForNewTabOptions:(long long)arg1;
- (unsigned long long)_indexForInsertionBeforeTabDocument:(id)arg1 withPrivateBrowsingEnabled:(_Bool)arg2;
- (unsigned long long)_indexForInsertionAfterTabDocument:(id)arg1 withPrivateBrowsingEnabled:(_Bool)arg2;
- (void)insertTabDocuments:(id)arg1 beforeTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;
- (void)insertTabDocument:(id)arg1 afterTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;
- (void)_insertTabDocument:(id)arg1 atIndex:(unsigned long long)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4 updateUI:(_Bool)arg5;
- (void)_adoptTabDocument:(id)arg1 atIndex:(unsigned long long)arg2 forPrivateBrowsing:(_Bool)arg3;
- (_Bool)_makeRoomForNewTabDocument:(id)arg1;
- (id)_oldestInactiveTabDocumentForPrivateBrowsing:(_Bool)arg1;
- (_Bool)canAddNewTabForPrivateBrowsing:(_Bool)arg1;
@property(readonly, nonatomic) _Bool canAddNewTabForCurrentBrowsingMode;
- (void)_switchActiveTabDocumentFromTabDocument:(id)arg1 toTabDocument:(id)arg2;
- (void)setActiveTabDocument:(id)arg1 animated:(_Bool)arg2 deferActivation:(_Bool)arg3;
- (void)setActiveTabDocument:(id)arg1 animated:(_Bool)arg2;
@property(retain, nonatomic) TabDocument *activeTabDocument;
@property(readonly, nonatomic) _Bool canCloseOtherTabs;
@property(readonly, nonatomic) _Bool canCloseTab;
@property(nonatomic) _Bool tabViewDefersActivation;
@property(readonly, nonatomic) TabDocument *tabDocumentBeingActivated;
@property(readonly, nonatomic) _Bool hasTabsThatShouldBeObscuredForDigitalHealth;
- (void)deactivateAllUsageTrackingInformationIfNecessary;
- (void)updateUsageTrackingInformationIfNecessary;
- (void)_setActiveTabDocument:(id)arg1;
- (id)_activeTabDocumentForPrivateBrowsing:(_Bool)arg1;
- (void)_logActivationForTab:(id)arg1;
- (void)logTabActivationInterval:(double)arg1 forActivationType:(long long)arg2;
- (void)updateHibernatedTabDocumentsSavingState;
- (void)updateTabCount;
@property(readonly, copy, nonatomic) NSSet *allSnapshotIdentifiers;
@property(readonly, copy, nonatomic) NSArray *allTabDocuments;
- (id)_otherTabDocuments;
@property(readonly, copy, nonatomic) NSArray *currentTabDocuments;
@property(readonly, nonatomic) unsigned long long numberOfCurrentNonHiddenTabs;
- (id)_tabDocumentsForPrivateBrowsing:(_Bool)arg1;
- (id)_currentTabs;
- (void)_createVeryRecentlyClosedTabCountInvalidationTimer;
- (void)_cancelVeryRecentlyClosedTabCountInvalidationTimer;
- (void)closeTabsAutomaticallyIfNecessary;
@property(readonly, nonatomic) RecentlyClosedTabViewController *recentlyClosedTabController;
- (void)_restorePersistentDocumentState:(id)arg1 into:(id)arg2 withCurrentActiveDocument:(id)arg3 activeDocumentIsValid:(_Bool)arg4 restoredActiveDocumentIndex:(unsigned long long)arg5;
- (_Bool)_shouldRestoreBlankTab;
- (void)_removeCurrentBackForwardItemFromTabDocument:(id)arg1;
- (_Bool)readState;
- (void)saveStateInBackground:(_Bool)arg1;
- (id)_persistentStateDictionaryForTabs:(id)arg1;
- (id)_tabStatesForTabs:(id)arg1 quickUpdate:(_Bool)arg2;
- (void)saveAllTabsStateWithQuickUpdate:(_Bool)arg1;
- (void)saveBrowserWindowStateOnly;
- (unsigned long long)_indexOfActiveTab:(id)arg1 tabDocuments:(id)arg2;
- (void)_prepareBrowserWindowDataIncludingTabState:(_Bool)arg1 forQuickUpdate:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_persistAllTabStates:(id)arg1 needsValidate:(_Bool)arg2;
- (void)updateTabStatesAndValidate:(_Bool)arg1 shouldDeleteEmptyWindow:(_Bool)arg2;
- (void)saveStateInBackground:(_Bool)arg1 needsValidate:(_Bool)arg2;
- (void)removeSavedStateForTabDocument:(id)arg1;
- (void)saveStateForTabDocument:(id)arg1 needsValidate:(_Bool)arg2;
- (void)_updateSavedStateValidity:(_Bool)arg1;
- (void)_validateSavedState:(id)arg1;
- (void)_clearStateValidateTimer;
- (void)_saveStateFromTimer:(id)arg1;
- (void)_setSaveStateTimer:(id)arg1;
- (void)setStateNeedsSaved;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

